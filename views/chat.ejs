<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <link href="https://maxcdn.bootstrapcdn.com/font-awesome/4.4.0/css/font-awesome.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-alpha.6/css/bootstrap.min.css" integrity="sha384-rwoIResjU2yc3z8GV/NPeZWAv56rSmLldC3R/AZzGRnGxQQKnKkoFVhFQhNUwEyJ" crossorigin="anonymous">

    <title>Messenger</title>
    <style>
        #messages{   
            height: 470px;
            padding-top: 10px;
        }
        body{background:skyblue; font-family: verdana; padding: 30px;}
        h1{font-size: 33px; text-transform: uppercase; letter-spacing: 2px; text-align: center;}
        input, label, textarea{display: block; margin: 10px 0; padding: 4px; width: 100%; 
        font-family: 'Raleway', 'Lato', Arial, sans-serif; font-size: 20px;}
    </style>
</head>
<body>
    <div class="container">
        <div class="row">
            <div class="col-md-6 offset-md-3 col-sm-12">
                <h1 class="text-center">
                    Messenger
                    <br>
                    
                    <button id="clear" class="btn btn-danger">Clear</button>
                </h1>
                <div id="status"></div>
                <div id="chat">
                    <div class="card">
                        <div id="messages" class="card-block">

                        </div>
                    </div>
                    <br>
                        <textarea  id="textarea"   class="form-control" placeholder="Enter messages..."></textarea>
                </div>
            </div>
        </div>
    </div>

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.2.0/socket.io.js"></script>
    <script>
        (function(){


            var element = function(id){
                return document.getElementById(id);
            }
            // Get elements
            var status = element('status');

            // Get messages
            var messages = element('messages');
            // Get input message
            var input = element('textarea');
            var clear = element('clear');

            // Set status default
            var statusDefault = status.textContent;

            var setStatus = function(s){
                status.textContent = s;

                if(s != statusDefault){
                    var delay = setTimeout(function(){
                        setStatus(statusDefault);  
                    }, 4000);
                }
            }

            // Connect to socket.io
            var socket = io.connect('http://localhost:5000');
            var msgs = [];
            // Check for connection
            if(socket !== undefined){
                
                // Handle output
                socket.on('output', function(data){
                    // Build out message div
                    console.log(msgs);
                    if(msgs.length == 16){
                    var child = messages.lastElementChild;  
                    while (child) { 
                        messages.removeChild(child); 
                        child = messages.lastElementChild; 
                    } 
                        msgs = []; 
                    }
                    msgs.push(data.message);
                    let message = document.createElement('div');
                    message.setAttribute('class', 'chat-message');
                    message.style.paddingLeft = "5px";
                    message.textContent = data.name + ": " + data.message + ' >> ' + data.polarity;
                    messages.appendChild(message);
                    messages.insertBefore(message, messages.lastChild);
                    input.value = ""; 
                });

                // Get status from server
                socket.on('status', function(data){
                    setStatus((typeof data === 'object') ? data.message : data);

                    // If status clear
                    if(data.clear){
                        input.value = '';
                    }
                });

                // Handle input
                input.addEventListener('keydown', (event) => {
                    if(event.keyCode === 13){
                        // Emit the input to the server
                        socket.emit('input', {
                            auth: localStorage.getItem('uuid'),
                            message: input.value
                        });
                        event.preventDefault();
                    }
                });

                // Typing
                input.addEventListener('keypress', function(){
                    socket.emit('typing', {
                        auth: localStorage.getItem('uuid'),
                    });
                });

                socket.on('typing', function(data){
                    setStatus(data.user + ' typing...');
                });

                // Handle Clear
                clear.addEventListener('click', function(){
                    socket.emit('clear');
                });

                socket.on('cleared', function(){
                    messages.textContent = '';
                });
            }
        })();
    </script>
</body>
</html>